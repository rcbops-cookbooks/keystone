# This file autogenerated by Chef
# Do not edit, changes will be overwritten
<% if not node["custom_template_banner"].nil? %>
<%= node["custom_template_banner"] %>
<% end %>
[DEFAULT]
# A "shared secret" between keystone and other openstack services
admin_token = <%= @admin_token %>

# The IP address of the network interface to listen on
bind_host = <%= @ip_address %>

# The port number which the public service listens on
public_port = <%= @service_port %>

# The port number which the public admin listens on
admin_port = <%= @admin_port %>

# The base endpoint URLs for keystone that are advertised to clients
# (NOTE: this does NOT affect how keystone listens for connections)
# public_endpoint = http://localhost:%(public_port)d/
# admin_endpoint = http://localhost:%(admin_port)d/

# The port number which the OpenStack Compute service listens on
compute_port = 8774

# Path to your policy definition containing identity actions
# policy_file = policy.json

# Rule to check if no matching policy definition is found
# FIXME(dolph): This should really be defined as [policy] default_rule
# policy_default_rule = admin_required

# Role for migrating membership relationships
# During a SQL upgrade, the following values will be used to create a new role
# that will replace records in the user_tenant_membership table with explicit
# role grants.  After migration, the member_role_id will be used in the API
# add_user_to_project, and member_role_name will be ignored.
# member_role_id = 9fe2ff9ee4384b1894a90878d3e92bab
# member_role_name = _member_

# === Logging Options ===
# Print debugging output
# (includes plaintext request logging, potentially including passwords)
debug = False

# Print more verbose output
verbose = True

# Name of log file to output to. If not set, logging will go to stdout.
log_file = keystone.log

# The directory to keep log files in (will be prepended to --logfile)
log_dir = /var/log/keystone

# Use syslog for logging.
# use_syslog = False

# syslog facility to receive log lines
# syslog_log_facility = LOG_USER

# If this option is specified, the logging configuration file specified is
# used and overrides any other logging options specified. Please see the
# Python logging module documentation for details on logging configuration
# files.
# log_config = logging.conf

# A logging.Formatter log message format string which may use any of the
# available logging.LogRecord attributes.
# log_format = %(asctime)s %(levelname)8s [%(name)s] %(message)s

# Format string for %(asctime)s in log records.
# log_date_format = %Y-%m-%d %H:%M:%S

# onready allows you to send a notification when the process is ready to serve
# For example, to have it notify using systemd, one could set shell command:
# onready = systemd-notify --ready
# or a module with notify() method:
# onready = keystone.common.systemd

[sql]
# The SQLAlchemy connection string used to connect to the database
connection = mysql://<%= @user %>:<%= @passwd %>@<%= @db_ipaddress %>/<%= @db_name %>

# the timeout before idle sql connections are reaped
idle_timeout = 200
min_pool_size = 5
max_pool_size = 10
pool_timeout = 200

[identity]
<% if @auth_type == "ldap" or @auth_type == "ad" %>
driver = keystone.identity.backends.ldap.Identity

[ldap]
# Base Config
url = <%= @ldap_options["url"] %>
tree_dn = <%= @ldap_options["tree_dn"] %>
user = <%= @ldap_options["user"] %>
password = <%= @ldap_options["password"] %>
backend_entities = <%= @ldap_options["backend_entities"] %>
suffix = <%= @ldap_options["suffix"] %>
use_dumb_member = <%= @ldap_options["user_dumb_member"] %>

# User Schema
user_tree_dn = <%= @ldap_options["user_tree_dn"] %>
user_objectclass = <%= @ldap_options["user_objectclass"] %>
user_id_attribute = <%= @ldap_options["user_id_attribute"] %>
user_name_attribute = <%= @ldap_options["user_name_attribute"] %>
<% if @auth_type == "ad" %>
user_filter = <%= @ldap_options["user_filter"] %>
user_mail_attribute = <%= @ldap_options["user_mail_attribute"] %>
user_enabled_mask = <%= @ldap_options["user_enabled_attribute"] %>
user_enabled_default = <%= @ldap_options["user_enabled_mask"] %>
user_attribute_ignore = <%= @ldap_options["user_enabled_default"] %>
user_allow_create = <%= @ldap_options["user_allow_create"] %>
user_allow_update = <%= @ldap_options["user_allow_update"] %>
user_allow_delete = <%= @ldap_options["user_allow_delete"] %>
<% end %>

<% if @ldap_options["role_tree_dn"] %>
# Role Schema 
role_tree_dn = <%= @ldap_options["role_tree_dn"] %>
role_objectclass = <%= @ldap_options["role_objectclass"] %>
role_id_attribute = <%= @ldap_options["role_id_attribute"] %>
role_name_attribute = <%= @ldap_options["role_name_attribute"] %>
role_member_attribute = <%= @ldap_options["role_member_attribute"] %>
<% if @auth_type == "ad" %>
role_filter = <%= @ldap_options["role_filter"] %>
role_attribute_ignore = <%= @ldap_options["role_attribute_ignore"] %>
role_allow_create = <%= @ldap_options["role_allow_create"] %>
role_allow_update = <%= @ldap_options["role_allow_update"] %>
role_allow_delete = <%= @ldap_options["role_allow_delete"] %>
<% end %>
<% end %>

<% if @ldap_options["tenant_tree_dn"] %>
# Tenant Schema 
tenant_tree_dn = <%= @ldap_options["tenant_tree_dn"] %>
tenant_objectclass = <%= @ldap_options["tenant_objectclass"] %>
tenant_id_attribute = <%= @ldap_options["tenant_id_attribute"] %>
tenant_member_attribute = <%= @ldap_options["tenant_member_attribute"] %>
tenant_name_attribute = <%= @ldap_options["tenant_name_attribute"] %>
<% if @auth_type == "ad" %>
tenant_filter = <%= @ldap_options["tenant_filter"] %>
tenant_desc_attribute = <%= @ldap_options["tenant_desc_attribute"] %>
tenant_enabled_attribute = <%= @ldap_options["tenant_attribute_ignore"] %>
tenant_allow_create = <%= @ldap_options["tenant_allow_create"] %>
tenant_allow_update = <%= @ldap_options["tenant_allow_update"] %>
tenant_allow_delete = <%= @ldap_options["tenant_allow_delete"] %>
<% end %>
<% end %>

<% else %>
driver = keystone.identity.backends.sql.Identity

<% end %>

[catalog]
# dynamic, sql-based backend (supports API/CLI-based management commands)
driver = keystone.catalog.backends.sql.Catalog

# static, file-based backend (does *NOT* support any management commands)
# driver = keystone.catalog.backends.templated.TemplatedCatalog

# template_file = default_catalog.templates

[token]
driver = keystone.token.backends.sql.Token

# Amount of time a token should remain valid (in seconds)
expiration = 86400

[policy]
driver = keystone.policy.backends.sql.Policy

[ec2]
driver = keystone.contrib.ec2.backends.kvs.Ec2

[ssl]
#enable = True
#certfile = /etc/keystone/ssl/certs/keystone.pem
#keyfile = /etc/keystone/ssl/private/keystonekey.pem
#ca_certs = /etc/keystone/ssl/certs/ca.pem
#cert_required = True

[signing]
<% if @pki -%>
token_format = PKI
certfile = /etc/keystone/ssl/certs/signing_cert.pem
keyfile = /etc/keystone/ssl/private/signing_key.pem
ca_certs = /etc/keystone/ssl/certs/ca.pem
key_size = 1024
valid_days = 3650
ca_password = None
<% else -%>
#token_format = PKI
#certfile = /etc/keystone/ssl/certs/signing_cert.pem
#keyfile = /etc/keystone/ssl/private/signing_key.pem
#ca_certs = /etc/keystone/ssl/certs/ca.pem
#key_size = 1024
#valid_days = 3650
#ca_password = None
<% end -%>
[auth]
methods = password,token
password = keystone.auth.plugins.password.Password
token = keystone.auth.plugins.token.Token

[filter:debug]
paste.filter_factory = keystone.common.wsgi:Debug.factory

[filter:token_auth]
paste.filter_factory = keystone.middleware:TokenAuthMiddleware.factory

[filter:admin_token_auth]
paste.filter_factory = keystone.middleware:AdminTokenAuthMiddleware.factory

[filter:xml_body]
paste.filter_factory = keystone.middleware:XmlBodyMiddleware.factory

[filter:json_body]
paste.filter_factory = keystone.middleware:JsonBodyMiddleware.factory

[filter:user_crud_extension]
paste.filter_factory = keystone.contrib.user_crud:CrudExtension.factory

[filter:crud_extension]
paste.filter_factory = keystone.contrib.admin_crud:CrudExtension.factory

[filter:ec2_extension]
paste.filter_factory = keystone.contrib.ec2:Ec2Extension.factory

[filter:s3_extension]
paste.filter_factory = keystone.contrib.s3:S3Extension.factory

[filter:url_normalize]
paste.filter_factory = keystone.middleware:NormalizingFilter.factory

[filter:sizelimit]
paste.filter_factory = keystone.middleware:RequestBodySizeLimiter.factory

[filter:stats_monitoring]
paste.filter_factory = keystone.contrib.stats:StatsMiddleware.factory

[filter:stats_reporting]
paste.filter_factory = keystone.contrib.stats:StatsExtension.factory

[filter:access_log]
paste.filter_factory = keystone.contrib.access:AccessLogMiddleware.factory

[app:public_service]
paste.app_factory = keystone.service:public_app_factory

[app:service_v3]
paste.app_factory = keystone.service:v3_app_factory

[app:admin_service]
paste.app_factory = keystone.service:admin_app_factory

[pipeline:public_api]
# uncomment the line below to enable debug logging
# pipeline = stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug ec2_extension user_crud_extension public_service
pipeline = access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug ec2_extension user_crud_extension public_service

[pipeline:admin_api]
pipeline = access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug stats_reporting ec2_extension s3_extension crud_extension admin_service

[pipeline:api_v3]
pipeline = access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug stats_reporting ec2_extension s3_extension service_v3

[app:public_version_service]
paste.app_factory = keystone.service:public_version_app_factory

[app:admin_version_service]
paste.app_factory = keystone.service:admin_version_app_factory

[pipeline:public_version_api]
pipeline = access_log sizelimit stats_monitoring url_normalize xml_body public_version_service

[pipeline:admin_version_api]
pipeline = access_log sizelimit stats_monitoring url_normalize xml_body admin_version_service

[composite:main]
use = egg:Paste#urlmap
/v2.0 = public_api
/v3 = api_v3
/ = public_version_api

[composite:admin]
use = egg:Paste#urlmap
/v2.0 = admin_api
/v3 = api_v3
/ = admin_version_api
